{%comment%}Just the tap {%endcomment%}
{% if section.settings.enable_map %}

    <div class='sidebar'>
      <div class='heading'>
        <h1>{{section.settings.title}}</h1>
      </div>
      <div id='listings' class='listings'></div>
    </div>
    <div id='map' class='map'></div>

    <script type="text/javascript">
      // This will let you use the .remove() function later on
      $( document ).ready(function() {
      if (!('remove' in Element.prototype)) {
        Element.prototype.remove = function() {
          if (this.parentNode) {
              this.parentNode.removeChild(this);
          }
        };
      }

      mapboxgl.accessToken = 'pk.eyJ1IjoiYWFsaXlhbmd1bCIsImEiOiJjazdnbmx0eHMwMWlxM2RwYWkwbWtyeWJ1In0.qgdiZd2Pr7wFbQeYxoUZ1Q';
      /** 
       * Add the map to the page
      */
      var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/light-v10',
        center: [-77.034084142948, 38.909671288923],
        zoom: 13,
        scrollZoom: false
      });

      var stores = {
        "type": "FeatureCollection",
        "features": [ {% for block in section.blocks %}
          {
            "type": "Feature",
            "geometry": {
              "type": "Point",
              "coordinates": [
                {{block.settings.latitude}},
                {{block.settings.longitude}}
              ]
            },
            "properties": {
              "name": "{{block.settings.name}}",
              "phoneFormatted": "{{block.settings.phoneFormatted}}",
              "phone": "{{block.settings.phone}}",
              "address": "{{block.settings.address}}",
              "city": "{{block.settings.city}}",
              "country": "{{block.settings.country}}",
              "crossStreet": "{{block.settings.crossStreet}}",
              "postalCode": "{{block.settings.postalCode}}",
              "state": "{{block.settings.state}}"
            }
          } {%- if forloop.last -%}{%- else -%},{%- endif -%} {% endfor %}
        ]
      };
      
      /**
       * Assign a unique id to each store. You'll use this `id`
       * later to associate each point on the map with a listing
       * in the sidebar.
      */
      stores.features.forEach(function(store, i){
        store.properties.id = i;
      });

      /**
       * Wait until the map loads to make changes to the map.
      */
      map.on('load', function (e) {
        /** 
         * This is where your '.addLayer()' used to be, instead
         * add only the source without styling a layer
        */
        map.addSource("places", {
          "type": "geojson",
          "data": stores
        });

        /**
         * Add all the things to the page:
         * - The location listings on the side of the page
         * - The markers onto the map
        */
        buildLocationList(stores);
        addMarkers();
      });

      /**
       * Add a marker to the map for every store listing.
      **/
      function addMarkers() {
        /* For each feature in the GeoJSON object above: */
        stores.features.forEach(function(marker) {
          /* Create a div element for the marker. */
          var el = document.createElement('div');
          /* Assign a unique `id` to the marker. */
          el.id = "marker-" + marker.properties.id;
          /* Assign the `marker` class to each marker for styling. */
          el.className = 'marker';
          
          /**
           * Create a marker using the div element
           * defined above and add it to the map.
          **/
          new mapboxgl.Marker(el, { offset: [0, -23] })
            .setLngLat(marker.geometry.coordinates)
            .addTo(map);

          /**
           * Listen to the element and when it is clicked, do three things:
           * 1. Fly to the point
           * 2. Close all other popups and display popup for clicked store
           * 3. Highlight listing in sidebar (and remove highlight for all other listings)
          **/
          el.addEventListener('click', function(e){
            /* Fly to the point */
            flyToStore(marker);
            /* Close all other popups and display popup for clicked store */
            createPopUp(marker);
            /* Highlight listing in sidebar */
            var activeItem = document.getElementsByClassName('active');
            e.stopPropagation();
            if (activeItem[0]) {
              activeItem[0].classList.remove('active');
            }
            var listing = document.getElementById('listing-' + marker.properties.id);
            listing.classList.add('active');
          });
        });
      }

      /**
       * Add a listing for each store to the sidebar.
      **/
      function buildLocationList(data) {
        data.features.forEach(function(store, i){
          /**
           * Create a shortcut for `store.properties`,
           * which will be used several times below.
          **/
          var prop = store.properties;

          /* Add a new listing section to the sidebar. */
          var listings = document.getElementById('listings');
          var listing = listings.appendChild(document.createElement('div'));
          /* Assign a unique `id` to the listing. */
          listing.id = "listing-" + prop.id;
          /* Assign the `item` class to each listing for styling. */
          listing.className = 'item';

          /* Add the link to the individual listing created above. */
          var link = listing.appendChild(document.createElement('a'));
          link.href = 'javascript:void(0)';
          link.className = 'title';
          link.id = "link-" + prop.id;
          link.innerHTML = prop.address;

          /* Add details to the individual listing. */
          var details = listing.appendChild(document.createElement('div'));
          details.innerHTML = prop.city;
          if (prop.phone) {
            details.innerHTML += ' Â· ' + prop.phoneFormatted;
          }

          /**
           * Listen to the element and when it is clicked, do four things:
           * 1. Update the `currentFeature` to the store associated with the clicked link
           * 2. Fly to the point
           * 3. Close all other popups and display popup for clicked store
           * 4. Highlight listing in sidebar (and remove highlight for all other listings)
          **/
          link.addEventListener('click', function(e){
            for (var i=0; i < data.features.length; i++) {
              if (this.id === "link-" + data.features[i].properties.id) {
                var clickedListing = data.features[i];
                flyToStore(clickedListing);
                createPopUp(clickedListing);
              }
            }
            var activeItem = document.getElementsByClassName('active');
            if (activeItem[0]) {
              activeItem[0].classList.remove('active');
            }
            this.parentNode.classList.add('active');
          });
        });
      }

      /**
       * Use Mapbox GL JS's `flyTo` to move the camera smoothly
       * a given center point.
      **/
      function flyToStore(currentFeature) {
        map.flyTo({
          center: currentFeature.geometry.coordinates,
          zoom: 15
        });
      }

      /**
       * Create a Mapbox GL JS `Popup`.
      **/
      function createPopUp(currentFeature) {
        var popUps = document.getElementsByClassName('mapboxgl-popup');
        if (popUps[0]) popUps[0].remove();
        var popup = new mapboxgl.Popup({closeOnClick: false})
          .setLngLat(currentFeature.geometry.coordinates)
          .setHTML('<h3>Sweetgreen</h3>' +
            '<h4>' + currentFeature.properties.address + '</h4>')
          .addTo(map);
      }
        });
    </script>
{% endif %}
{% schema %}
{
  "name": "New Map",
  "class": "js-section__home-map",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_map",
      "label": "Show Map"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Our locations"
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Location",
      "settings": [
       {
         "type": "text",
         "id": "name",
         "label": "Name"
       },
       {
         "type": "text",
         "id": "latitude",
         "label": "Coordinates Latitude",
         "default": "-105.0705024"
       },
       {
         "type": "text",
         "id": "longitude",
         "label": "Coordinates Longitude",
         "default": "39.9801825"
       },
       {
         "type": "text",
         "id": "phone",
         "label": "Phone",
         "default": "6106429400"
       },
       {
         "type": "textarea",
         "id": "address",
         "label": "Address",
         "default": "1380 Horizon Ave"
       },
       {
         "type": "text",
         "id": "postalCode",
         "label": "Postal Code",
         "default": "80026"
       },
       {
         "type": "text",
         "id": "city",
         "label": "City",
         "default": "Lafayette"
       },
       {
         "type": "text",
         "id": "phoneFormatted",
         "label": "Phone# (Formatted)",
         "default": "(303) 227-3243"
       },
       {
         "type": "text",
         "id": "state",
         "label": "State",
         "default": "CO"
       },
       {
         "type": "text",
         "id": "country",
         "label": "Country",
         "default": "United States"
       }
      ]
    }
  ],
  "presets": [
    {
     "name": "New Map",
     "category": "Text"
    }
  ]
}
{% endschema %}
<style>
@media (max-width: 767px) {
  .sidebar {
	display: block;
	width: 100%;
	height: 100%;
	float: left;
	overflow: hidden;
	border-right: 1px solid rgba(0, 0, 0, 0.25);
  }
  .map {
	display: block;
	width: 100%;
	float: left;
	height: 450px;
  }
}
@media (min-width: 768px) {
  .sidebar {
	display: block;
	width: 30%;
	height: 100%;
	float: left;
	overflow: hidden;
	border-right: 1px solid rgba(0, 0, 0, 0.25);
  }
  .map {
	display: block;
	width: 70%;
	float: left;
	height: 450px;
  }
}
.pad2 {
	padding: 20px;
}
h1 {
	font-size: 22px;
	margin: 0;
	font-weight: 400;
	line-height: 20px;
	padding: 20px 2px;
}
a {
	color: #404040;
	text-decoration: none;
}
a:hover {
	color: #101010;
}
.heading {
	background: #fff;
	border-bottom: 8px solid #ef592b;
	min-height: 60px;
	line-height: 60px;
	padding: 0 10px;
	background-color: #fcb041;
	color: #fff;
}
.listings {
	height: 100%;
	overflow: auto;
	padding-bottom: 60px;
}
.listings .item {
	display: block;
	border-bottom: 1px solid #eee;
	padding: 10px;
	text-decoration: none;
}
.listings .item:last-child {
	border-bottom: none;
}
.listings .item .title {
	display: block;
	color: #e75527;
	font-weight: 700;
    text-transform: uppercase;
}
.listings .item .title small {
	font-weight: 400;
}
.listings .item.active .title,
.listings .item .title:hover {
	color: #fcb041;
}
.listings .item.active {
	background-color: #f8f8f8;
}
::-webkit-scrollbar {
	width: 3px;
	height: 3px;
	border-left: 0;
	background: rgba(0, 0, 0, 0.1);
}
::-webkit-scrollbar-track {
	background: none;
}
::-webkit-scrollbar-thumb {
	background: #00853e;
	border-radius: 0;
}
.marker {
	border: none;
	cursor: pointer;
	height: 56px;
	width: 56px;
    background-image: url({{'marker_56x.png' | asset_url}});
	background-color: rgba(0, 0, 0, 0);
}
.clearfix {
	display: block;
}
.clearfix:after {
	content: '.';
	display: block;
	height: 0;
	clear: both;
	visibility: hidden;
}
/* Marker tweaks */
.mapboxgl-popup {
	padding-bottom: 50px;
}
.mapboxgl-popup-close-button {
	display: none;
}
.mapboxgl-popup-content {
	font: 400 15px/22px'Source Sans Pro', 'Helvetica Neue', Sans-serif;
	padding: 0;
	width: 180px;
}
.mapboxgl-popup-content-wrapper {
	padding: 1%;
}
.mapboxgl-popup-content h3 {
	background: #f15929;
	color: #fff;
	margin: 0;
	display: block;
	padding: 10px;
	border-radius: 3px 3px 0 0;
	font-weight: 700;
	margin-top: -15px;
}
.mapboxgl-popup-content h4 {
	margin: 0;
	display: block;
	padding: 10px 10px 10px 10px;
	font-weight: 400;
	background: #f4b441;
}
.mapboxgl-popup-content div {
	padding: 10px;
}
.mapboxgl-container .leaflet-marker-icon {
	cursor: pointer;
}
.mapboxgl-popup-anchor-top > .mapboxgl-popup-content {
	margin-top: 15px;
}
.mapboxgl-popup-anchor-top > .mapboxgl-popup-tip {
	border-bottom-color: #91c949;
}
</style>
